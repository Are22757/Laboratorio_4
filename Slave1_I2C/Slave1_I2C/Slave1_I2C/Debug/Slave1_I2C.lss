
Slave1_I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f5  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b6  00000000  00000000  00000b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f7  00000000  00000000  00001353  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ea  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f8  00000000  00000000  00001e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001ffa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  88:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Slave_Init>:
  90:	97 b1       	in	r25, 0x07	; 7
  92:	9f 7c       	andi	r25, 0xCF	; 207
  94:	97 b9       	out	0x07, r25	; 7
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
  a0:	85 e4       	ldi	r24, 0x45	; 69
  a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a6:	08 95       	ret

000000a8 <main>:



int main(void)
{
   DDRD |= (1<<DDD5);
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	8a b9       	out	0x0a, r24	; 10
   PORTD &= ~(1<<PORTD5);
  ae:	8b b1       	in	r24, 0x0b	; 11
  b0:	8f 7d       	andi	r24, 0xDF	; 223
  b2:	8b b9       	out	0x0b, r24	; 11
   
   I2C_Slave_Init(SlaveAddress);
  b4:	80 e3       	ldi	r24, 0x30	; 48
  b6:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Slave_Init>
   sei();
  ba:	78 94       	sei
	
    while (1) 
    {
		if(buffer == 'R'){
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  c0:	82 35       	cpi	r24, 0x52	; 82
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x14>
			PORTD |= (1<<PORTD5);
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	83 ed       	ldi	r24, 0xD3	; 211
  ce:	90 e3       	ldi	r25, 0x30	; 48
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x28>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x32>
  da:	00 00       	nop
			_delay_ms(1000);
			buffer = 0;
  dc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTD &= ~(1<<PORTD5);  
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	8f 7d       	andi	r24, 0xDF	; 223
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	ea cf       	rjmp	.-44     	; 0xbc <main+0x14>

000000e8 <__vector_24>:
		
			
    }
}

ISR(TWI_vect){
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	8f 93       	push	r24
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
	uint8_t estado; 
	estado = TWSR & 0xF8; 
  f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  fc:	88 7f       	andi	r24, 0xF8	; 248
	switch(estado){
  fe:	80 37       	cpi	r24, 0x70	; 112
 100:	49 f0       	breq	.+18     	; 0x114 <__vector_24+0x2c>
 102:	18 f4       	brcc	.+6      	; 0x10a <__vector_24+0x22>
 104:	80 36       	cpi	r24, 0x60	; 96
 106:	31 f0       	breq	.+12     	; 0x114 <__vector_24+0x2c>
 108:	15 c0       	rjmp	.+42     	; 0x134 <__vector_24+0x4c>
 10a:	80 38       	cpi	r24, 0x80	; 128
 10c:	49 f0       	breq	.+18     	; 0x120 <__vector_24+0x38>
 10e:	80 39       	cpi	r24, 0x90	; 144
 110:	39 f0       	breq	.+14     	; 0x120 <__vector_24+0x38>
 112:	10 c0       	rjmp	.+32     	; 0x134 <__vector_24+0x4c>
	case 0x60:
	case 0x70:
		TWCR |= (1<<TWINT);
 114:	ec eb       	ldi	r30, 0xBC	; 188
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	80 83       	st	Z, r24
		break;
 11e:	0f c0       	rjmp	.+30     	; 0x13e <__vector_24+0x56>
	case 0x80:
	case 0x90:
		buffer = TWDR; 
 120:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 124:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		TWCR |= (1<< TWINT); //Se limpia la bandera
 128:	ec eb       	ldi	r30, 0xBC	; 188
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	80 83       	st	Z, r24
		break;
 132:	05 c0       	rjmp	.+10     	; 0x13e <__vector_24+0x56>
	 default: //Se libera el bus de cualquier error
	TWCR |= (1<<TWINT)|(1<<TWSTO);	
 134:	ec eb       	ldi	r30, 0xBC	; 188
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 69       	ori	r24, 0x90	; 144
 13c:	80 83       	st	Z, r24
	}
}
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
